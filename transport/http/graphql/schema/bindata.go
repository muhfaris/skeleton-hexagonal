// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schema generated by go-bindata.// sources:
// schema/type/health_check.graphql
// schema/type/login.graphql
// schema/type/root.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaTypeHealth_checkGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\x49\xcd\x4b\x51\x28\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xe6\x52\x50\x48\x4f\x2d\xf1\x48\x4d\xcc\x29\xc9\x70\xce\x48\x4d\xce\xb6\x52\x08\x2e\x29\xca\xcc\x4b\x57\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xcc\x29\xbf\xc0\x30\x00\x00\x00")

func schemaTypeHealth_checkGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeHealth_checkGraphql,
		"schema/type/health_check.graphql",
	)
}

func schemaTypeHealth_checkGraphql() (*asset, error) {
	bytes, err := schemaTypeHealth_checkGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/health_check.graphql", size: 48, mode: os.FileMode(436), modTime: time.Unix(1647251324, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeLoginGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\xba\x6b\xaf\xe0\x5d\xa1\x9b\x2c\xba\x49\x0e\x10\x84\xad\x06\x53\x47\x36\x96\x4c\x5b\x4a\xee\x3e\x38\x21\x33\x26\xcc\xd2\x42\x7e\xff\x7d\x05\xce\x55\x61\x0a\x0b\x0f\x3c\x12\x7a\xf8\x37\x00\x55\xa8\x30\xae\x64\x61\xd2\x12\x78\x79\x31\x00\x19\x45\x7e\x52\xf1\xfd\xac\xa4\xd8\xed\x6c\xc6\xe8\x5f\x26\x78\x77\x2e\x55\xd6\x91\x24\x27\x16\xda\x89\xc1\x5b\x18\x3e\xc0\x00\x7c\xd5\x18\xe7\x1e\xfe\x24\xaf\xed\xd1\x8a\x21\xf6\x83\x3e\xac\xbd\xd1\x39\x12\x99\x35\x7d\x13\xdf\x59\xa7\xc3\x59\xa8\x53\x10\x45\xad\x62\x61\x60\x6d\xee\x1e\x15\xed\xd5\x75\x2f\x41\xbf\x4a\xec\x61\xe7\x7c\x56\x45\x0d\x89\x1b\xe0\x60\xbe\x1e\x1f\x1f\x17\x7b\xb3\x97\x34\xb3\x99\x5b\x00\x00\x00\xff\xff\x2e\xb2\x8f\xee\x56\x01\x00\x00")

func schemaTypeLoginGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeLoginGraphql,
		"schema/type/login.graphql",
	)
}

func schemaTypeLoginGraphql() (*asset, error) {
	bytes, err := schemaTypeLoginGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/login.graphql", size: 342, mode: os.FileMode(436), modTime: time.Unix(1647419087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaTypeRootGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\xc8\x2d\x2d\x49\x2c\xc9\xcc\xcf\xb3\x52\xf0\x85\xb2\xb8\x14\x14\x0a\x4b\x53\x8b\x2a\xad\x14\x02\x41\x14\x57\x2d\x17\x57\x49\x65\x41\x2a\x5c\xbe\x5a\x01\x26\x02\x96\x57\x00\xf1\x01\x01\x00\x00\xff\xff\x13\xe3\xa2\x94\x51\x00\x00\x00")

func schemaTypeRootGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaTypeRootGraphql,
		"schema/type/root.graphql",
	)
}

func schemaTypeRootGraphql() (*asset, error) {
	bytes, err := schemaTypeRootGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/type/root.graphql", size: 81, mode: os.FileMode(436), modTime: time.Unix(1647241782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/type/health_check.graphql": schemaTypeHealth_checkGraphql,
	"schema/type/login.graphql":        schemaTypeLoginGraphql,
	"schema/type/root.graphql":         schemaTypeRootGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"type": &bintree{nil, map[string]*bintree{
			"health_check.graphql": &bintree{schemaTypeHealth_checkGraphql, map[string]*bintree{}},
			"login.graphql":        &bintree{schemaTypeLoginGraphql, map[string]*bintree{}},
			"root.graphql":         &bintree{schemaTypeRootGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
